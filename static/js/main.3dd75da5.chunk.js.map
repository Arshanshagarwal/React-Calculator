{"version":3,"sources":["App.js","ToDoList.jsx","serviceWorker.js","index.js"],"names":["App","useState","result","setResult","inputRef","useRef","useEffect","current","focus","handleClick","event","concat","target","name","clearAll","backspace","slice","calculate","eval","toString","e","className","type","value","ref","readOnly","onClick","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0qBAIA,SAASA,MAAO,IAAD,UACWC,oDAAS,IADpB,oKACPC,OADO,cACAC,UADA,cAEPC,SAASC,kDAAO,MACtBC,sDAAU,kBAAIF,SAASG,QAAQC,WAC/B,IAAMC,YAAY,SAACC,GACjBP,UAAUD,OAAOS,OAAOD,EAAME,OAAOC,QAEjCC,SAAS,WACbX,UAAU,KAENY,UAAU,WACdZ,UAAUD,OAAOc,MAAM,GAAG,KAEtBC,UAAU,SAAVA,YACJ,IACAd,UAAUe,KAAKhB,QAAQiB,YACtB,MAAMC,GACLjB,UAAU,WAGd,OACE,kEAAKkB,UAAU,cACb,kEAAKA,UAAU,cACb,oEAAOC,KAAK,OAAOC,MAAOrB,OAAQsB,IAAKpB,SAAUqB,UAAQ,IACzD,kEAAKJ,UAAU,eACb,qEAAQK,QAASZ,SAAUa,GAAG,SAA9B,SACA,qEAAQD,QAASX,UAAWY,GAAG,aAA/B,KACA,qEAAQd,KAAK,IAAIa,QAASjB,YAAakB,GAAG,QAA1C,KACA,qEAAQd,KAAK,IAAIa,QAASjB,aAA1B,KACA,qEAAQI,KAAK,IAAIa,QAASjB,aAA1B,KACA,qEAAQI,KAAK,IAAIa,QAASjB,aAA1B,KACA,qEAAQI,KAAK,IAAIa,QAASjB,YAAakB,GAAG,QAA1C,KACA,qEAAQd,KAAK,IAAIa,QAASjB,aAA1B,KACA,qEAAQI,KAAK,IAAIa,QAASjB,aAA1B,KACA,qEAAQI,KAAK,IAAIa,QAASjB,aAA1B,KACA,qEAAQI,KAAK,IAAIa,QAASjB,YAAakB,GAAG,QAA1C,QACA,qEAAQd,KAAK,IAAIa,QAASjB,aAA1B,KACA,qEAAQI,KAAK,IAAIa,QAASjB,aAA1B,KACA,qEAAQI,KAAK,IAAIa,QAASjB,aAA1B,KACA,qEAAQI,KAAK,IAAIa,QAASjB,YAAakB,GAAG,QAA1C,KACA,qEAAQd,KAAK,IAAIa,QAASjB,aAA1B,KACA,qEAAQI,KAAK,IAAIa,QAASjB,aAA1B,KACA,qEAAQiB,QAAST,UAAWU,GAAG,UAA/B,aAOK3B,2B,uGCrDf,M,uFCYoB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACnC,EAAA,EAAD,OAEFoC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3dd75da5.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport {ToDoList} from './ToDoList'\n\nfunction App() {\n  const[result,setResult]=useState(\"\");\n  const inputRef=useRef(null);\n  useEffect(()=>inputRef.current.focus())\n  const handleClick=(event)=>{\n    setResult(result.concat(event.target.name));\n  };\n  const clearAll=()=>{\n    setResult(\"\");\n  };\n  const backspace=()=>{\n    setResult(result.slice(0,-1));\n  };\n  const calculate=()=>{\n    try{\n    setResult(eval(result).toString());\n    }catch(e){\n      setResult(\"Error\")\n    }\n  };\n  return (\n    <div className=\"outer-case\">\n      <div className=\"inner-case\">\n        <input type=\"text\" value={result} ref={inputRef} readOnly></input>\n        <div className=\"button-case\"> \n          <button onClick={clearAll} id=\"clear\">Clear</button>\n          <button onClick={backspace} id=\"backspace\">C</button>\n          <button name=\"+\" onClick={handleClick} id=\"diff\">+</button>\n          <button name=\"7\" onClick={handleClick}>7</button>\n          <button name=\"8\" onClick={handleClick}>8</button>\n          <button name=\"9\" onClick={handleClick}>9</button>\n          <button name=\"-\" onClick={handleClick} id=\"diff\">-</button>\n          <button name=\"4\" onClick={handleClick}>4</button>\n          <button name=\"5\" onClick={handleClick}>5</button>\n          <button name=\"6\" onClick={handleClick}>6</button>\n          <button name=\"*\" onClick={handleClick} id=\"diff\">&times;</button>\n          <button name=\"1\" onClick={handleClick}>1</button>\n          <button name=\"2\" onClick={handleClick}>2</button>\n          <button name=\"3\" onClick={handleClick}>3</button>\n          <button name=\"/\" onClick={handleClick} id=\"diff\">/</button>\n          <button name=\"0\" onClick={handleClick}>0</button>\n          <button name=\".\" onClick={handleClick}>.</button>\n          <button onClick={calculate} id=\"result\">Result</button>\n         </div> \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\n\r\nexport const ToDoList=(props)=>{\r\n    return (\r\n    <>    \r\n    <div className=\"list-div\">\r\n        <i class=\"fa fa-times\" aria-hidden=\"true\" onClick={()=>props.onSelect(props.id)}></i>   \r\n        <li>{props.text}</li>\r\n    </div>\r\n    </>\r\n    );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}